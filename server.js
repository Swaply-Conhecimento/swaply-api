require('dotenv').config();
const app = require('./src/app');

const PORT = process.env.PORT || 5000;

const server = app.listen(PORT, () => {
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                   SWAPLY API                 ‚ïë
‚ïë          Plataforma de Troca de              ‚ïë
‚ïë              Conhecimentos                   ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë üöÄ Servidor rodando na porta ${PORT.toString().padEnd(4)} üöÄ        ‚ïë
‚ïë üåç Ambiente: ${process.env.NODE_ENV?.toUpperCase().padEnd(11) || 'DEVELOPMENT'} üåç        ‚ïë
‚ïë üìä Health Check: http://localhost:${PORT}/health   ‚ïë
‚ïë üìö API Docs: http://localhost:${PORT}/api          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
  `);
  
  // Verificar conex√£o com servi√ßos externos
  checkExternalServices();
});

// Fun√ß√£o para verificar servi√ßos externos
const checkExternalServices = async () => {
  console.log('\nüîç Verificando servi√ßos externos...\n');
  
  // Verificar configura√ß√£o de email
  try {
    const { testEmailConfiguration } = require('./src/services/emailService');
    const emailOk = await testEmailConfiguration();
    console.log(`üìß Email Service: ${emailOk ? '‚úÖ OK' : '‚ùå ERRO'}`);
  } catch (error) {
    console.log('üìß Email Service: ‚ùå ERRO - Configura√ß√£o n√£o encontrada');
  }
  
  // Verificar API do Zoom
  try {
    const { checkApiStatus } = require('./src/services/zoomService');
    const zoomStatus = await checkApiStatus();
    console.log(`üìπ Zoom API: ${zoomStatus.success ? '‚úÖ OK' : '‚ùå ERRO'}`);
  } catch (error) {
    console.log('üìπ Zoom API: ‚ùå ERRO - Configura√ß√£o n√£o encontrada');
  }
  
  // Verificar Cloudinary
  try {
    const { cloudinary } = require('./src/config/cloudinary');
    if (cloudinary.config().cloud_name) {
      console.log('‚òÅÔ∏è  Cloudinary: ‚úÖ OK');
    } else {
      console.log('‚òÅÔ∏è  Cloudinary: ‚ùå ERRO - Configura√ß√£o incompleta');
    }
  } catch (error) {
    console.log('‚òÅÔ∏è  Cloudinary: ‚ùå ERRO - Configura√ß√£o n√£o encontrada');
  }
  
  // Verificar Stripe
  try {
    if (process.env.STRIPE_SECRET_KEY) {
      console.log('üí≥ Stripe: ‚úÖ OK');
    } else {
      console.log('üí≥ Stripe: ‚ùå ERRO - Chave n√£o configurada');
    }
  } catch (error) {
    console.log('üí≥ Stripe: ‚ùå ERRO - Configura√ß√£o n√£o encontrada');
  }
  
  console.log('\n‚ú® Swaply API pronta para uso! ‚ú®\n');
};

// Tratamento de erros do servidor
server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof PORT === 'string' ? 'Pipe ' + PORT : 'Port ' + PORT;

  switch (error.code) {
    case 'EACCES':
      console.error(`‚ùå ${bind} requer privil√©gios elevados`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`‚ùå ${bind} j√° est√° em uso`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

module.exports = server;
